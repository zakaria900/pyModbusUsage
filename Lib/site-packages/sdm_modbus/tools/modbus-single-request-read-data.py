import argparse
import pymodbus.exceptions
import sdm_modbus
import sdm_modbus.ws100
import time


parser = argparse.ArgumentParser(description="Read data from a single SDM ou WS100-19XX device.")

parser.add_argument("-p", "--port", type=str, required=True,
                    help="Serial Port eg : /dev/ttyUSB0")

parser.add_argument("-b", "--baudrate", type=int, default=9600,
                    help="Baudrate, by default 9600")

parser.add_argument("-i", "--id", type=int, default=1,
                    help="Modbus Slave ID, by default 1")

parser.add_argument("--parity", type=str, default="N", choices=["N", "E", "O"],
                    help="Parity : N (None), E (Even), O (Odd). By default : N")

parser.add_argument("--device_name", type=str, default="SDM54-2T", choices=["SDM54-2T", "SDM630", "WS100-19"],
                    help="Device model. Choose between : SDM54-2T, SDM630, WS100-19")

args = parser.parse_args()


if args.device_name == "SDM54-2T":
    device = sdm_modbus.SDM54_2T(device=args.port, baud=args.baudrate, unit=args.id, parity=args.parity)
    device_type = "sdm"

elif args.device_name == "SDM630":
    device = sdm_modbus.SDM630(device=args.port, baud=args.baudrate, unit=args.id, parity=args.parity)
    device_type = "sdm"

elif args.device_name == "WS100-19":
    device = sdm_modbus.ws100.WS100_19XX(device=args.port, baud=args.baudrate, unit=args.id, parity=args.parity)
    device_type = "ws100"

else:
    raise ValueError(f"Unsupported device_name: {args.device_name}")

# --- Lecture des donn√©es ---
if device_type == "sdm":
    print(device.read_all())

elif device_type == "ws100":
    print(device.read_all_scaled())



